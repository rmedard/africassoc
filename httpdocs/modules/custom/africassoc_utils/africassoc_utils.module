<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Session\AccountInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_query_alter().
 *
 * @throws \Exception
 */
function africassoc_utils_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'events' and $view->current_display == 'agenda'
    and !empty($view->exposed_raw_input['field_event_date_value'])) {

    $local_input_date = DateTime::createFromFormat('d/m/Y', $view->exposed_raw_input['field_event_date_value']);
    if ($local_input_date !== FALSE) {
      $local_from_date = $local_input_date->setTime(0, 0, 0)
        ->format('Y-m-d H:i:s');
      $local_to_date = $local_input_date->setTime(23, 59, 59)
        ->format('Y-m-d H:i:s');
      if ($query instanceof Sql) {
        foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            if (stristr($condition['field'], 'field_event_date_value')) {
              $brussels_timezone = new DateTimeZone('Europe/Brussels');
              $from = (new DrupalDateTime($local_from_date, $brussels_timezone))
                ->setTimezone(new DateTimeZone('UTC'))
                ->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
              $to = (new DrupalDateTime($local_to_date, $brussels_timezone))
                ->setTimezone(new DateTimeZone('UTC'))
                ->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

              $condition['field'] = 'node__field_event_date.field_event_date_value';
              $condition['value'] = [$from, $to];
              $condition['operator'] = 'BETWEEN';
            }
          }
        }
      }
    }
    else {
      Drupal::logger('africassoc_utils')
        ->error('Invalid event date format: "{value}"', [
          'value' => $view->exposed_raw_input['field_event_date_value'],
        ]);
    }
  }
}

/**
 * Implements hook_node_access().
 */
function africassoc_utils_node_access(NodeInterface $node, $op, AccountInterface $account) {
  kint(array($op, $account));
  if ($node->bundle() != 'event' || $op != 'update') {
    return AccessResult::neutral();
  }
  return AccessResult::neutral();
}
